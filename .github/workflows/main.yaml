name: Main

on:
  push:
    branches: [ 'main' ]
  pull_request:
    types: [ opened, synchronize ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 💿 Restore cached turbo artifacts
        uses: actions/cache@v4
        with:
          path: '**/.turbo'
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: 💿 Restore cached node_modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install dependencies
        run: npm install

      - name: 🛠️ Build
        run: npm run ci

      - name: Publish packages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npx changeset publish

  detect-changes:
    name: Detect changed apps
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      changed_apps: ${{ steps.changed-apps.outputs.apps }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed app directories
        id: changed-app-directories
        uses: tj-actions/changed-files@v44
        with:
          files: apps/**/*
          dir_names: true
          dir_names_max_depth: 2
          dir_names_exclude_current_dir: true
          matrix: true
          escape_json: false

      - name: Convert app directory paths to app names
        id: changed-apps
        run: |
          changed_apps=$(echo '${{ steps.changed-app-directories.outputs.all_changed_files }}' | jq -c '[.[] | sub("apps/"; "")]')
          echo "::set-output name=apps::${changed_apps}"

  docker-build:
    name: Build docker images
    if: needs.detect-changes.outputs.changed_apps != '[]'
    runs-on: ubuntu-latest
    needs: detect-changes
    env:
      DOCKER_REGISTRY: docker.io # TODO: Update the registry
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.changed_apps) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Determine Dockerfile Type from package.json
        id: determine-dockerfile
        run: |
          # Read the dockerfileType from the app's package.json
          dockerfile_type=$(jq -r '.dockerfileType' apps/${{ matrix.app }}/package.json)
          echo "Dockerfile type for ${{ matrix.app }}: ${dockerfile_type}"
          
          # Fail the step if dockerfileType is not found
          if [ -z "${dockerfile_type}" ] || [ "${dockerfile_type}" == "null" ]; then
            echo "Error: dockerfileType not found in package.json for ${{ matrix.app }}"
            exit 1
          fi
          
          echo "::set-output name=dockerfile_type::${dockerfile_type}"

      - name: Set Build Arguments
        id: set-build-args
        run: |
          echo "APP_ID=$(basename `git rev-parse --show-toplevel`)-${{ matrix.app }}" >> $GITHUB_ENV
          echo "BUILD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "BUILD_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "NAMESPACE=$(basename `git rev-parse --show-toplevel`)" >> $GITHUB_ENV

      - name: Build base image
        if: ${{ matrix.app != 'test-e2e' }} # Skip base image build for test-e2e
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: .github/docker/base.Dockerfile
          tags: localhost:5000/${{ env.NAMESPACE }}/base-image
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Build app image: ${{ matrix.app }}"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .github/docker/${{ steps.determine-dockerfile.outputs.dockerfile_type }}.Dockerfile
          build-args: |
            BASE_IMAGE=localhost:5000/${{ env.NAMESPACE }}/base-image
            APP=${{ matrix.app }}
            APP_ID=${{ env.APP_ID }}
            BUILD_SHA=${{ env.GITHUB_SHA }}
            BUILD_BRANCH=${{ env.BUILD_BRANCH }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.app }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.app }}:${{ env.BUILD_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
